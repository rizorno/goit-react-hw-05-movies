{"version":3,"file":"static/js/189.3a981e18.chunk.js","mappings":"iRACA,GAAgB,mBAAmB,+BAA+B,WAAW,uBAAuB,WAAW,uBAAuB,aAAa,yBAAyB,YAAY,yB,SCkExL,EA3Da,WACX,IAAQA,GAAaC,EAAAA,EAAAA,MAAbD,SAER,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdC,EAAAA,QAAAA,MAAc,CACZC,SAAU,WAHE,UAKSC,EAAAA,EAAAA,IAAQT,GALjB,QAKRU,EALQ,QAODP,KAAKQ,OAAS,GACzBP,GAAQ,SAAAQ,GAAI,cAAQF,EAASP,KAAjB,IAEe,IAAzBO,EAASP,KAAKQ,QAChBE,EAAAA,OAAAA,QACE,gFAGJN,EAAAA,QAAAA,SAfc,kDAiBdO,QAAQC,IAAR,MAjBc,0DAAH,qDAoBfT,GAED,GAAE,CAACN,IAEJ,IAAMgB,EAAWb,EAAKc,KAAI,SAAAC,GACxB,IAAQC,EAAsCD,EAAtCC,GAAIC,EAAkCF,EAAlCE,aAAcC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,UAChC,OACE,gBAAaC,UAAWC,EAAAA,YAAxB,WACE,gBACEC,IACEL,EAAY,yCAC0BA,GAClC,2FAENM,IAAKL,EACLE,UAAWC,EAAAA,eAEb,eAAID,UAAWC,EAAAA,cAAf,SAAmCH,KACnC,eAAGE,UAAWC,EAAAA,aAAd,WACE,iBAAMD,UAAWC,EAAAA,aAAjB,yBACCF,OAbIH,EAiBZ,IAED,OACE,+BACE,eAAII,UAAWC,EAAAA,oBAAf,SAAyCR,KAG9C,C,8PC/DKW,E,OAAgBC,EAAAA,OAAa,CACjCC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAS,mCAAG,WAAMH,GAAN,yFACAH,EAAcO,IAAI,mBAAoB,CAC3DJ,OAAAA,IAFqB,uBACfK,EADe,EACfA,KADe,kBAIhBA,GAJgB,2CAAH,sDAOTC,EAAW,mCAAG,WAAMN,GAAN,yFACFH,EAAcO,IAAI,qBAAsB,CAC7DJ,OAAAA,IAFuB,uBACjBK,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,sDAOXE,EAAM,mCAAG,WAAMP,GAAN,yFACGH,EAAcO,IAAI,kBAAmB,CAC1DJ,OAAAA,IAFkB,uBACZK,EADY,EACZA,KADY,kBAIbA,GAJa,2CAAH,sDAONG,EAAU,mCAAG,WAAMR,GAAN,yFACDH,EAAcO,IAAI,eAAgB,CACvDJ,OAAAA,IAFsB,uBAChBK,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,sDAOVI,EAAO,mCAAG,WAAOpB,EAAIW,GAAX,yFACEH,EAAcO,IAAd,gBAA2Bf,GAAM,CACtDW,OAAAA,IAFmB,uBACbK,EADa,EACbA,KADa,kBAIdA,GAJc,2CAAH,wDAOP1B,EAAO,mCAAG,WAAOU,EAAIW,GAAX,yFACEH,EAAcO,IAAd,gBAA2Bf,EAA3B,YAAyC,CAC9DW,OAAAA,IAFmB,uBACbK,EADa,EACbA,KADa,kBAIdA,GAJc,2CAAH,wDAOPK,EAAU,mCAAG,WAAOrB,EAAIW,GAAX,yFACDH,EAAcO,IAAd,gBAA2Bf,EAA3B,YAAyC,CAC9DW,OAAAA,IAFsB,uBAChBK,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,wDAOVM,EAAU,mCAAG,WAAOtB,EAAIW,GAAX,yFACDH,EAAcO,IAAd,gBAA2Bf,EAA3B,WAAwC,CAC7DW,OAAAA,IAFsB,uBAChBK,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,uD","sources":["webpack://react-homework-template/./src/components/Cast/cast.module.scss?8bbe","components/Cast/Cast.jsx","services/moviesAPI.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast-box-wrapper\":\"cast_cast-box-wrapper__HZ3eg\",\"box-cast\":\"cast_box-cast__6+FlJ\",\"cast-img\":\"cast_cast-img__R3K4Y\",\"cast-title\":\"cast_cast-title__tutM+\",\"cast-span\":\"cast_cast-span__90s1N\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getCast } from '../../services/moviesAPI';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport css from './cast.module.scss';\n\nconst Cast = () => {\n  const { moviedId } = useParams();\n\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        Loading.pulse({\n          svgColor: 'orange',\n        });\n        const response = await getCast(moviedId);\n\n        if (response.cast.length > 0) {\n          setCast(prev => [...response.cast]);\n        }\n        if (response.cast.length === 0) {\n          Notify.failure(\n            'Sorry, there are no cast matching your search query. Please try again later.'\n          );\n        }\n        Loading.remove();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchCast();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [moviedId]);\n\n  const elements = cast.map(element => {\n    const { id, profile_path, name, character } = element;\n    return (\n      <li key={id} className={css['box-cast']}>\n        <img\n          src={\n            profile_path\n              ? `https://image.tmdb.org/t/p/w500${profile_path}`\n              : 'https://t4.ftcdn.net/jpg/00/65/10/47/360_F_65104718_x17a76wzWKIm3BlhA6uyYVkDs9982c6q.jpg'\n          }\n          alt={name}\n          className={css['cast-img']}\n        />\n        <h2 className={css['cast-title']}>{name}</h2>\n        <p className={css['cast-text']}>\n          <span className={css['cast-span']}>Character: </span>\n          {character}\n        </p>\n      </li>\n    );\n  });\n\n  return (\n    <>\n      <ul className={css['cast-box-wrapper']}>{elements}</ul>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst moviesService = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'bc23d88e8c379b88dcc9e69c75bc8f78',\n    language: 'en-US',\n  },\n});\n\nexport const getGenres = async params => {\n  const { data } = await moviesService.get('genre/movie/list', {\n    params,\n  });\n  return data;\n};\n\nexport const getTrending = async params => {\n  const { data } = await moviesService.get('trending/movie/day', {\n    params,\n  });\n  return data;\n};\n\nexport const getTop = async params => {\n  const { data } = await moviesService.get('movie/top_rated', {\n    params,\n  });\n  return data;\n};\n\nexport const getKeyword = async params => {\n  const { data } = await moviesService.get('search/movie', {\n    params,\n  });\n  return data;\n};\n\nexport const getById = async (id, params) => {\n  const { data } = await moviesService.get(`movie/${id}`, {\n    params,\n  });\n  return data;\n};\n\nexport const getCast = async (id, params) => {\n  const { data } = await moviesService.get(`movie/${id}/credits`, {\n    params,\n  });\n  return data;\n};\n\nexport const getReviews = async (id, params) => {\n  const { data } = await moviesService.get(`movie/${id}/reviews`, {\n    params,\n  });\n  return data;\n};\n\nexport const getYouTube = async (id, params) => {\n  const { data } = await moviesService.get(`movie/${id}/videos`, {\n    params,\n  });\n  return data;\n};\n"],"names":["moviedId","useParams","useState","cast","setCast","useEffect","fetchCast","Loading","svgColor","getCast","response","length","prev","Notify","console","log","elements","map","element","id","profile_path","name","character","className","css","src","alt","moviesService","axios","baseURL","params","api_key","language","getGenres","get","data","getTrending","getTop","getKeyword","getById","getReviews","getYouTube"],"sourceRoot":""}