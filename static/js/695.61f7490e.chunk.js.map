{"version":3,"file":"static/js/695.61f7490e.chunk.js","mappings":"iRACA,EAA8B,6BAA9B,EAA0E,8BAA1E,EAAuH,8B,SCuDvH,EAhDgB,WACd,IAAQA,GAAaC,EAAAA,EAAAA,MAAbD,SAER,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAsBF,EAAAA,EAAAA,UAAS,GAAxBG,GAAP,gBAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBC,EAAAA,QAAAA,MAAc,CACZC,SAAU,WAHK,UAKMC,EAAAA,EAAAA,IAAWV,EAAU,CAC1CW,KAAMN,IANS,QAKXO,EALW,QASL,cAAoB,GAC9BR,GAAW,SAAAS,GAAI,cAAQD,EAASE,QAAjB,IAEiB,IAA9BF,EAAQ,eACVG,EAAAA,OAAAA,QACE,mFAGJP,EAAAA,QAAAA,SAjBiB,kDAmBjBQ,QAAQC,IAAR,MAnBiB,0DAAH,qDAsBlBV,GAED,GAAE,CAACP,IAEJ,IAAMkB,EAAWf,EAAQgB,KAAI,SAAAC,GAC3B,IAAQC,EAAoCD,EAApCC,GAAIC,EAAgCF,EAAhCE,OAAQC,EAAwBH,EAAxBG,WAAYC,EAAYJ,EAAZI,QAChC,OACE,gBAAaC,UAAWC,EAAxB,WACE,eAAGD,UAAWC,EAAd,UACGH,EAAWI,MAAM,EAAG,IADvB,OACgCL,EADhC,QAGA,cAAGG,UAAWC,EAAd,SAAoCF,MAJ7BH,EAOZ,IAED,OAAO,wBAAKH,GACb,C,8PCpDKU,E,OAAgBC,EAAAA,OAAa,CACjCC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAS,mCAAG,WAAMH,GAAN,yFACAH,EAAcO,IAAI,mBAAoB,CAC3DJ,OAAAA,IAFqB,uBACfK,EADe,EACfA,KADe,kBAIhBA,GAJgB,2CAAH,sDAOTC,EAAW,mCAAG,WAAMN,GAAN,yFACFH,EAAcO,IAAI,qBAAsB,CAC7DJ,OAAAA,IAFuB,uBACjBK,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,sDAOXE,EAAM,mCAAG,WAAMP,GAAN,yFACGH,EAAcO,IAAI,kBAAmB,CAC1DJ,OAAAA,IAFkB,uBACZK,EADY,EACZA,KADY,kBAIbA,GAJa,2CAAH,sDAONG,EAAU,mCAAG,WAAMR,GAAN,yFACDH,EAAcO,IAAI,eAAgB,CACvDJ,OAAAA,IAFsB,uBAChBK,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,sDAOVI,EAAO,mCAAG,WAAOnB,EAAIU,GAAX,yFACEH,EAAcO,IAAd,gBAA2Bd,GAAM,CACtDU,OAAAA,IAFmB,uBACbK,EADa,EACbA,KADa,kBAIdA,GAJc,2CAAH,wDAOPK,EAAO,mCAAG,WAAOpB,EAAIU,GAAX,yFACEH,EAAcO,IAAd,gBAA2Bd,EAA3B,YAAyC,CAC9DU,OAAAA,IAFmB,uBACbK,EADa,EACbA,KADa,kBAIdA,GAJc,2CAAH,wDAOP1B,EAAU,mCAAG,WAAOW,EAAIU,GAAX,yFACDH,EAAcO,IAAd,gBAA2Bd,EAA3B,YAAyC,CAC9DU,OAAAA,IAFsB,uBAChBK,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,wDAOVM,EAAU,mCAAG,WAAOrB,EAAIU,GAAX,yFACDH,EAAcO,IAAd,gBAA2Bd,EAA3B,WAAwC,CAC7DU,OAAAA,IAFsB,uBAChBK,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,uD","sources":["webpack://react-homework-template/./src/components/Reviews/reviews.module.scss?1d70","components/Reviews/Reviews.jsx","services/moviesAPI.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"box-reviews\":\"reviews_box-reviews__47Qgh\",\"reviews-name\":\"reviews_reviews-name__mE+lL\",\"reviews-text\":\"reviews_reviews-text__rL2ha\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getReviews } from '../../services/moviesAPI';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport css from './reviews.module.scss';\n\nconst Reviews = () => {\n  const { moviedId } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n  const [currentPage] = useState(1);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        Loading.pulse({\n          svgColor: 'orange',\n        });\n        const response = await getReviews(moviedId, {\n          page: currentPage,\n        });\n\n        if (response['total_results'] > 0) {\n          setReviews(prev => [...response.results]);\n        }\n        if (response['total_results'] === 0) {\n          Notify.failure(\n            'Sorry, there are no reviews matching your search query. Please try again later.'\n          );\n        }\n        Loading.remove();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchReviews();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [moviedId]);\n\n  const elements = reviews.map(element => {\n    const { id, author, created_at, content } = element;\n    return (\n      <li key={id} className={css['box-reviews']}>\n        <p className={css['reviews-name']}>\n          {created_at.slice(0, 10)} | \"{author}\"\n        </p>\n        <p className={css['reviews-text']}>{content}</p>\n      </li>\n    );\n  });\n\n  return <ul>{elements}</ul>;\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst moviesService = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'bc23d88e8c379b88dcc9e69c75bc8f78',\n    language: 'en-US',\n  },\n});\n\nexport const getGenres = async params => {\n  const { data } = await moviesService.get('genre/movie/list', {\n    params,\n  });\n  return data;\n};\n\nexport const getTrending = async params => {\n  const { data } = await moviesService.get('trending/movie/day', {\n    params,\n  });\n  return data;\n};\n\nexport const getTop = async params => {\n  const { data } = await moviesService.get('movie/top_rated', {\n    params,\n  });\n  return data;\n};\n\nexport const getKeyword = async params => {\n  const { data } = await moviesService.get('search/movie', {\n    params,\n  });\n  return data;\n};\n\nexport const getById = async (id, params) => {\n  const { data } = await moviesService.get(`movie/${id}`, {\n    params,\n  });\n  return data;\n};\n\nexport const getCast = async (id, params) => {\n  const { data } = await moviesService.get(`movie/${id}/credits`, {\n    params,\n  });\n  return data;\n};\n\nexport const getReviews = async (id, params) => {\n  const { data } = await moviesService.get(`movie/${id}/reviews`, {\n    params,\n  });\n  return data;\n};\n\nexport const getYouTube = async (id, params) => {\n  const { data } = await moviesService.get(`movie/${id}/videos`, {\n    params,\n  });\n  return data;\n};\n"],"names":["moviedId","useParams","useState","reviews","setReviews","currentPage","useEffect","fetchReviews","Loading","svgColor","getReviews","page","response","prev","results","Notify","console","log","elements","map","element","id","author","created_at","content","className","css","slice","moviesService","axios","baseURL","params","api_key","language","getGenres","get","data","getTrending","getTop","getKeyword","getById","getCast","getYouTube"],"sourceRoot":""}